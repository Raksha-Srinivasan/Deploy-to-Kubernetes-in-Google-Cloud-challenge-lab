Deploy to Kubernetes in Google Cloud: Challenge Lab



TASK 1 - Create a Docker image and store the Dockerfile

gcloud auth list

gsutil cat gs://cloud-training/gsp318/marking/setup_marking.sh | bash
gcloud source repos clone valkyrie-app
cd valkyrie-app
cat > Dockerfile <<EOF
FROM golang:1.10
WORKDIR /go/src/app
COPY source .
RUN go install -v
ENTRYPOINT ["app","-single=true","-port=8080"]
EOF
docker build -t valkyrie-app:v0.0.1 .
cd ..
cd marking
./step1.sh



TASK 2 - Test the created Docker image

cd ..
cd valkyrie-app
docker run -p 8080:8080 valkyrie-app:v0.0.1 &
cd ..
cd marking
./step2.sh 



TASK 3 - Push the Docker image in the Google Container Repository

cd ..
cd valkyrie-app
docker tag valkyrie-app:v0.0.1 gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.1
docker push gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.1
sed -i s#IMAGE_HERE#gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.1#g k8s/deployment.yaml


TASK 4 - Create and expose a deployment in Kubernetes

sed -i s#IMAGE_HERE#gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.1#g k8s/deployment.yaml
gcloud container clusters get-credentials valkyrie-dev --zone us-east1-d
kubectl create -f k8s/deployment.yaml
kubectl create -f k8s/service.yaml
git merge origin/kurt-dev



TASK 5 - Increase the replicas from 1 to 3


kubectl edit deployment valkyrie-dev

//Steps to do after the above command:
1. press "i" to edit the deployment and change replicas : 1 to 3
2. After changing press ESC and then ":wq" and press Enter



TASK 6 - Update the deployment with a new version of valkyrie-app


docker build -t gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2 .
docker push gcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2
kubectl edit deployment valkyrie-dev


//Steps to do after the above command:
1. press "i" to edit the update the deployment and change the "image: gcrgcr.io/$GOOGLE_CLOUD_PROJECT/valkyrie-app:v0.0.2" .
2. After changing press ESC and then ":wq" and press Enter


TASK 7 - Create a pipeline in Jenkins to deploy your app

docker ps

docker kill "container_id"  //Enter your container id

export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo


//In the cloud shell -> open preview on port 8080 ->Jenkins web view

Username : admin
Password : Randomly generated password from the above executed command

//steps to be followed:
1.Manage Jenkins -> Manage Credentials --> Global --> add credentials --> kind : Google Service Account from metadata --> Then Click Ok -->Then Go back to Jenkins Dashboard
2.Jenkins ->Click on New items --> Name : valkyrie-app --> click pipeline --> Click OK
3.Build Triggers -> Pipeline(Definition) --> selct Pipeline script from scm --> SCM : select GIT --> Repositry URL : (copy paste the url link from the below command) --> credentials : (your project id)

#To get repository URL run the following command in cloud shell:
gcloud source repos list

5.Apply save

//Click "Build Now" option to build and deploy your app
Note: wait until the app gets built--TO check whether your app is running -- On Build Queue--click on your app and select "Console Output"--for successful Deployment of your App!


#Run the following commands in shell

sed -i "s/green/orange/g" source/html.go
sed -i "s/YOUR_PROJECT/$GOOGLE_CLOUD_PROJECT/g" Jenkinsfile
git config --global user.email "student-xx-xxxxxxxxxxxx@qwiklabs.net"
git config --global user.name "student-xx-xxxxxxxxxxxx"
git add .
git commit -m "built pipeline init"
git push
